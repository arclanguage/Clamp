(in-package :clamp-tests)
(use-syntax :clamp)

(defsuite tables (clamp))

(deftest keys (tables)
  (let tab (table)
    (assert-equal '() (keys tab))
    (= (gethash 'a tab) 1)
    (assert-equal '(a) (keys tab))
    (= (gethash 'b tab) 2)
    (assert-true (or (equal '(a b) (keys tab))
                     (equal '(b a) (keys tab))))))

(deftest vals (tables)
  (let tab (table)
    (assert-equal '() (vals tab))
    (= (gethash 'a tab) 1)
    (assert-equal '(1) (vals tab))
    (= (gethash 'b tab) 2)
    (assert-true (or (equal '(1 2) (vals tab))
                     (equal '(2 1) (vals tab))))))

(deftest listtab (tables)
  (withs (tab (listtab '((a 1) (b 2)))
          keys (keys tab)
          vals (vals tab))
    (assert-true (or (equal '(a b) keys)
                     (equal '(b a) keys)))
    (assert-true (or (equal '(1 2) vals)
                     (equal '(2 1) vals)))
    (assert-eql 1 (gethash 'a tab))
    (assert-eql 2 (gethash 'b tab))))

(deftest tablist (tables)
  (let alist (tablist (obj a 1 b 2 c 3))
    (assert-eql 1 (alref alist 'a))
    (assert-eql 2 (alref alist 'b))
    (assert-eql 3 (alref alist 'c))))

(deftest obj (tables)
  (let tab (obj a 1 b 2 c 3)
    (assert-eql 1 (gethash 'a tab))
    (assert-eql 2 (gethash 'b tab))
    (assert-eql 3 (gethash 'c tab))))

(deftest alref (tables)
  (let alist '((a 1) (b 2) (c 3) (d nil))
    (assert-eql 1 (alref alist 'a))
    (assert-eql 2 (alref alist 'b))
    (assert-eql 3 (alref alist 'c))
    (assert-eql 4 (aif2 (alref alist 'd)
                        4
                        5))
    (assert-eql 5 (aif2 (alref alist 'e)
                        4
                        5))
    (assert-equal '(1) (alref alist 'a t))
    (assert-equal '(2) (alref alist 'b t))
    (assert-equal '(3) (alref alist 'c t))))

(deftest counts (tables)
  (let tab (counts '(1 2 3 2 1 2 3 1 2))
    (assert-eql 3 (gethash 1 tab))
    (assert-eql 4 (gethash 2 tab))
    (assert-eql 2 (gethash 3 tab)))
  (let tab (counts '((1 2) (3 4) (1 2) (1 3)) :test #'iso)
    (assert-eql 2 (gethash '(1 2) tab)))
  (let tab (counts '((1 2) (3 4) (1 2 3) (7 8 9)) :key #'len)
    (assert-eql 2 (gethash 2 tab))
    (assert-eql 2 (gethash 3 tab)))
  (let tab (counts '((1 2 3) (1 3) (7 8 3)) :test #'iso :key [rem #'even _])
    (assert-eql 2 (gethash '(1 3) tab))
    (assert-eql 1 (gethash '(7 3) tab))))

(deftest commonest (tables)
  (assert-equal '(nil 0) (mvl (commonest '())))
  (assert-equal '(5 3) (mvl (commonest'(1 6 5 2 3 4 5 9 2 8 5 9 0))))
  (assert-equal '(2 2) (mvl (commonest '((1 2) (1 2 3) (3 4) (3 4 5))
                                       :key #'len)))
  (assert-equal '((1 2) 2) (mvl (commonest '((1 2) (1 2 3) (1 2) (3 4))
                                           :test #'iso)))
  (assert-equal '((1 3) 2) (mvl (commonest '((1 2 3) (7 8 3) (1 3))
                                           :test #'iso
                                           :key [rem #'even _]))))

(deftest memtable (tables)
  (assert-equalp (table) (memtable '()))
  ;; The macro obj returns a table that uses equalp.
  (assert-equalp (obj a t b t) (memtable '(a b) :test #'equalp))
  (assert-equalp (obj a nil b nil) (memtable '(a b) :val nil :test #'equalp)))
